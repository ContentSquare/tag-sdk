type ScriptOptions = {
    clientId: string;
} & Partial<Pick<HTMLScriptElement, "defer" | "async" | "integrity">>;

/**
 * Appends the contentsquare script to document.head
 * @param {ScriptOptions} scriptOptions - Options for injecting the script
 * @param {string} scriptOptions.clientId - Client id, provided by Contentsquare.com (e.g.: 'a6f73d509') - Mandatory.
 * @param {boolean} [scriptOptions.defer=false] - Script will be fetched in parallel with the HTML parsing, but execution will occur after the HTML document has been fully parsed.
 * @param {boolean} [scriptOptions.async=true] - Script will be fetched in parallel with the HTML parsing, and it will be executed as soon as it is available, even if the HTML document is not fully parsed.
 * @param {string} [scriptOptions.integrity] - Integrity hash (SRI) of Contentsquare script. Must be generated by Contentsquare.
 * @returns {HTMLScriptElement} The contentsquare script that was appended to document.head
 */
export function injectContentsquareScript({ clientId, defer = false, async = true, integrity }: ScriptOptions) {
    const scriptElement = document.createElement("script");

    scriptElement.type = "text/javascript";
    scriptElement.defer = defer;
    scriptElement.async = async;

    if (integrity) {
        scriptElement.integrity = integrity;
    }

    scriptElement.crossOrigin = "anonymous";
    scriptElement.src = `https://t.contentsquare.net/uxa/${clientId}.js`;

    return document.head.appendChild(scriptElement);
}
